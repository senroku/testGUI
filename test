<scriptlet>
<implements type="Automation" id="dispatcher">
	<property name="PluginEvent">
		<get/>
	</property>
	<property name="PluginDescription">
		<get/>
	</property>
	<property name="PluginFileFilters">
		<get/>
	</property>
	<property name="PluginIsAutomatic">
		<get/>
	</property>
	<method name="UnpackFile"/>
	<method name="PackFile"/>
	<method name="IsFolder"/>
	<method name="UnpackFolder"/>
	<method name="PackFolder"/>
	<method name="ShowSettingsDialog"/>
</implements>

<script language="VBS">

Option Explicit

Const RegKeyPath = "HKCU\Software\Thingamahoochie\WinMerge\Plugins\OpenMSExcelFiles.sct\"
Dim MsgCannotGetMacros
MsgCannotGetMacros = "Cannot get Macros." & vbCrLf & _
	"   To allow WinMerge to compare macros, use MS Office to alter the settings in the Macro Security for the current application." & vbCrLf & _
	"   The Trust access to Visual Basic Project feature should be turned on to use this feature in WinMerge." & vbCrLf

Dim fso: Set fso = CreateObject("Scripting.FileSystemObject")
Dim wsh: Set wsh = CreateObject("WScript.Shell")
Dim count: count = 0

Function regRead(Key, DefaultValue)
	regRead = DefaultValue
	On Error Resume Next
	regRead = wsh.RegRead(Key)
End Function

Function getTimeStamp()
    Dim dt, tm, ms
    tm = Timer
    ms = Fix((tm - Fix(tm)) * 1000)
    tm = Fix(tm)
    getTimeStamp = (tm \ (60 * 60)) & ":" & ((tm \ 60) Mod 60) & ":" & (tm Mod 60) & "." & ms
End Function

Function get_PluginEvent()
	get_PluginEvent = "FILE_FOLDER_PACK_UNPACK"
End Function

Function get_PluginDescription()
	get_PluginDescription = "Display the text content of MS Excel files"
End Function

Function get_PluginFileFilters()
	get_PluginFileFilters = "\.xls(\..*)?$;\.xlsx(\..*)?$;\.xlsm(\..*)?$;\.xlsb(\..*)?;\.xla(\..*)?$;\.xlax(\..*)?$;\.xltx(\..*)?$;\.xltm(\..*)?$"
End Function

Function get_PluginIsAutomatic()
	get_PluginIsAutomatic = True
End Function

Function UnpackFile(fileSrc, fileDst, pbChanged, pSubcode)

	Dim fo
	Dim xl
	Dim wbk
	Dim sht
	Dim cmp

	Set fo = fso.CreateTextFile(fileDst, True, True)

'	Set xl = CreateObject("Excel.Application")
'	Set wbk = xl.Workbooks.Open(fileSrc, regRead(RegKeyPath & "UpdateLinks", 0))

	count = count + 1


	Dim strbuff: strbuff = fso.GetParentFolderName (fileSrc) & "\" & fso.GetBaseName(fileSrc) & count & "." & fso.GetExtensionName(fileSrc)
	fo.WriteLine strbuff

	Dim oWshShell: Set oWshShell = CreateObject("Scripting.FileSystemObject")
	Call oWshShell.CopyFile(fileSrc,strbuff)
	CreateObject("Shell.Application").ShellExecute strbuff

	Set sht = Nothing
	Set wbk = Nothing
	Set xl = Nothing
	Set fo = Nothing
	Set oWshShell = Nothing

	pbChanged = True
	pSubcode = 0
	UnpackFile = True

End Function

Function PackFile(fileSrc, fileDst, pbChanged, pSubcode)
	PackFile = False
End Function


Function IsFolder(file)
	IsFolder = regRead(RegKeyPath & "UnpackToFolder", False)
End Function

Function UnpackFolder(fileSrc, folderDst, pbChanged, pSubcode)
	Dim fo
	Dim xl
	Dim wbk
	Dim sht
	Dim cmp
	Dim No

	If Not fso.FolderExists(folderDst) Then fso.CreateFolder folderDst

	Set xl = CreateObject("Excel.Application")
	xl.EnableEvents = False
	xl.DisplayAlerts = False

	Dim backgroundChecking
	backgroundChecking = xl.ErrorCheckingOptions.BackgroundChecking
	xl.ErrorCheckingOptions.BackgroundChecking = False
    
	Set wbk = xl.Workbooks.Open(fileSrc, regRead(RegKeyPath & "UpdateLinks", 0))

	On Error Resume Next

	If regRead(RegKeyPath & "CompareDocumentProperties", False) Then
		Set fo = fso.CreateTextFile(fso.BuildPath(folderDst, "(0)DocumentProperties.txt"), True, True)
		writeObjectProperties fo, wbk.BuiltinDocumentProperties
		fo.Close
	End If

	If regRead(RegKeyPath & "CompareNames", True) Then
		Set fo = fso.CreateTextFile(fso.BuildPath(folderDst, "(0)Names.txt"), True, True)
		writeObjectProperties fo, wbk.Names
		fo.Close
	End If

	No = 1
	For Each sht In wbk.Worksheets
		If regRead(RegKeyPath & "CompareCellValues", True) Then
			Set fo = fso.CreateTextFile(fso.BuildPath(folderDst, "(" & No & ")" & escape(sht.Name) & ".txt"), True, True)
			writeCellValues fo, sht
			fo.Close
		End If

		If regRead(RegKeyPath & "CompareFormulas", False) Then
			Set fo = fso.CreateTextFile(fso.BuildPath(folderDst, "(" & No & ")" & escape(sht.Name) & "_Formulas.txt"), True, True)
			writeFormulas fo, sht
			fo.Close
		End If

		If regRead(RegKeyPath & "CompareTextsInShapes", True) Then
			Set fo = fso.CreateTextFile(fso.BuildPath(folderDst, "(" & No & ")" & escape(sht.Name) & "_Shapes.txt"), True, True)
			ungroupShapes sht
			writeTextsInShapes fo, sht
			fo.Close
		End If

		If regRead(RegKeyPath & "CompareHeadersAndFooters", True) Then
			Set fo = fso.CreateTextFile(fso.BuildPath(folderDst, "(" & No & ")" & escape(sht.Name) & "_HeadersAndFooters.txt"), True, True)
			writeHeadersAndFooters fo, sht
			fo.Close
		End If

		If regRead(RegKeyPath & "CompareWorksheetsAsImage", True) Then
			saveSheetAsImage sht, fso.BuildPath(folderDst, "(" & No & ")" & escape(sht.Name))
		End If
		No = No + 1
	Next
	If regRead(RegKeyPath & "CompareVBAMacros", True) Then
		If Not isAccessibleVBAProject(wbk) Then
			Set fo = fso.CreateTextFile(fso.BuildPath(folderDst, "CannotGetMacros.bas"), True, True)
			fo.WriteLine MsgCannotGetMacros
			fo.Close
		End If
		
		For Each cmp In wbk.VBProject.VBComponents
			cmp.Export fso.BuildPath(folderDst, cmp.Name & getModuleExtension(cmp))
		Next
	End If

	Set sht = Nothing
	wbk.Close
	Set wbk = Nothing
	xl.ErrorCheckingOptions.BackgroundChecking = backgroundChecking
	xl.Quit
	Set xl = Nothing
	Set fo = Nothing

	pbChanged = True
	pSubcode = 0
	UnpackFolder = True
End Function

Function PackFolder(fileSrc, folderDst, pbChanged, pSubcode)
	PackFolder = False
End Function

Function ShowSettingsDialog()
	Dim tname: tname = fso.BuildPath(fso.GetSpecialFolder(2), fso.GetTempName() & ".hta")
	Dim tfile: Set tfile = fso.CreateTextFile(tname)
	tfile.Write getResource("dialog1")
	tfile.Close
	Run wsh, "mshta.exe """ & tname & """"
	fso.DeleteFile tname 
End Function

Sub Run(sh, cmd)
	sh.Run cmd, 1, True
End Sub

</script>
</scriptlet>
